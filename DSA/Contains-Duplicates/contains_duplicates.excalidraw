{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "id": "wSr7qRm0DQvAWbbIdQf__",
      "type": "text",
      "x": 447.9140625,
      "y": 157.94140625,
      "width": 363.6895871400832,
      "height": 49.95191235656207,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0f",
      "roundness": null,
      "seed": 31609792,
      "version": 117,
      "versionNonce": 237865920,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1743620668969,
      "link": null,
      "locked": false,
      "text": "Contains Duplicate",
      "fontSize": 39.96152988524965,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Contains Duplicate",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "JUncbvf-Gv52G48RBB6GX",
      "type": "text",
      "x": 396.3125,
      "y": 214.89453125,
      "width": 658.9994506835938,
      "height": 400,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0g",
      "roundness": null,
      "seed": 1216020544,
      "version": 659,
      "versionNonce": 1337627584,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1743621587650,
      "link": null,
      "locked": false,
      "text": "Given an integer array nums, return true if any value appears \nmore than once in the array, otherwise return false.\n\nExample : \n[0,1] -> false\n[11,1] -> false\n[0] -> false\n[2,2] -> true\n[8, 9, 0, 9] -> true\n[0,1,2,4,6,7,8,9,2,0] -> true\n\nVariants or Similar Problems\nFind all duplicates and return them?\nReturn frequency of each value\nDuplicate II has you compare indices if they are in range of value k\nWhatever Duplicate III is (Note)",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Given an integer array nums, return true if any value appears \nmore than once in the array, otherwise return false.\n\nExample : \n[0,1] -> false\n[11,1] -> false\n[0] -> false\n[2,2] -> true\n[8, 9, 0, 9] -> true\n[0,1,2,4,6,7,8,9,2,0] -> true\n\nVariants or Similar Problems\nFind all duplicates and return them?\nReturn frequency of each value\nDuplicate II has you compare indices if they are in range of value k\nWhatever Duplicate III is (Note)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "0_tGG3gyvnJyNg6_iH4ZM",
      "type": "text",
      "x": 1325.91796875,
      "y": 178.49609375,
      "width": 1140.37939453125,
      "height": 475,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0h",
      "roundness": null,
      "seed": 1236357184,
      "version": 1139,
      "versionNonce": 786481216,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1743622327052,
      "link": null,
      "locked": false,
      "text": "Common Approaches\n- Brute Force\n    - For each element, you iterate after to see if there is another equal value,\n      then return true if found. If one has not been found, then return false.\n      Time Complexity - O(n^2)\n        Space Complexity - O(1)\n-HashSet\n     - For each element, add to a hashset if the value hasn't been added yet. \n        If the value is already in the hashset, then you return true. If you finish iterating,\n        it means all elements in the list is unique so you return false.\n        Time Complexity - O(n)\n        Space Complexity - O(n)\n- Sorting\n    - Sort the list then consecutive values, if the current element is equal to the one before it, then you return true\n        Time Complexity - O(nlogn)\n        Space Complexity - O(1)\n- Bonus\n    -Using HashSet properties, we can compare list of hashset to nums  return true if the length is the same,\n",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Common Approaches\n- Brute Force\n    - For each element, you iterate after to see if there is another equal value,\n      then return true if found. If one has not been found, then return false.\n      Time Complexity - O(n^2)\n        Space Complexity - O(1)\n-HashSet\n     - For each element, add to a hashset if the value hasn't been added yet. \n        If the value is already in the hashset, then you return true. If you finish iterating,\n        it means all elements in the list is unique so you return false.\n        Time Complexity - O(n)\n        Space Complexity - O(n)\n- Sorting\n    - Sort the list then consecutive values, if the current element is equal to the one before it, then you return true\n        Time Complexity - O(nlogn)\n        Space Complexity - O(1)\n- Bonus\n    -Using HashSet properties, we can compare list of hashset to nums  return true if the length is the same,\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "UyxTT7WqEflEeABVjx8pe",
      "type": "text",
      "x": 1347.889815506935,
      "y": 1003.125,
      "width": 146.35958862304688,
      "height": 52.671874999999986,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [
        "Coi4PmOcjMVtT-pJUJcGZ"
      ],
      "frameId": null,
      "index": "b13",
      "roundness": null,
      "seed": 247617600,
      "version": 653,
      "versionNonce": 701395008,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1743622272128,
      "link": null,
      "locked": false,
      "text": "Python",
      "fontSize": 42.13749999999999,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Python",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "OXdFwTwR1RnQBbF40q3uU",
      "type": "text",
      "x": 1345.9339294433594,
      "y": 1073.8671875,
      "width": 500.81964111328125,
      "height": 175,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [
        "Coi4PmOcjMVtT-pJUJcGZ"
      ],
      "frameId": null,
      "index": "b14",
      "roundness": null,
      "seed": 496704448,
      "version": 488,
      "versionNonce": 2132174912,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1743622272128,
      "link": null,
      "locked": false,
      "text": "def containsDuplicate(self, nums: List[int]) -> bool:\n        unique = set()\n        for num in nums:\n            if num in unique:\n                return True\n            unique.add(num)\n        return False",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "def containsDuplicate(self, nums: List[int]) -> bool:\n        unique = set()\n        for num in nums:\n            if num in unique:\n                return True\n            unique.add(num)\n        return False",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "Icg1MVmvC4CdtEtZNt-4g",
      "type": "text",
      "x": 1349.58984375,
      "y": 645.0390625,
      "width": 93.37661898612971,
      "height": 52.67187499999998,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [
        "Coi4PmOcjMVtT-pJUJcGZ"
      ],
      "frameId": null,
      "index": "b15",
      "roundness": null,
      "seed": 1299751872,
      "version": 576,
      "versionNonce": 1486839872,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1743622272128,
      "link": null,
      "locked": false,
      "text": "Java",
      "fontSize": 42.13749999999999,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Java",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "6Eo_l9R8Hcmr2oZyEerhS",
      "type": "text",
      "x": 1348.751220703125,
      "y": 707.453125,
      "width": 454.73974609375,
      "height": 225,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [
        "Coi4PmOcjMVtT-pJUJcGZ"
      ],
      "frameId": null,
      "index": "b16",
      "roundness": null,
      "seed": 873384000,
      "version": 581,
      "versionNonce": 105470016,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1743622272128,
      "link": null,
      "locked": false,
      "text": "public boolean containsDuplicate(int[] nums) {\n        Set<Integer> unique = new HashSet<>();\n        for(int num : nums){\n            if(unique.contains(num))\n                return true;\n            unique.add(num);\n        }\n        return false;\n    }",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "public boolean containsDuplicate(int[] nums) {\n        Set<Integer> unique = new HashSet<>();\n        for(int num : nums){\n            if(unique.contains(num))\n                return true;\n            unique.add(num);\n        }\n        return false;\n    }",
      "autoResize": true,
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}