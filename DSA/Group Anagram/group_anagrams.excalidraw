{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "id": "FwqYd11d1E2l23IEHvlIH",
      "type": "text",
      "x": 377.7734375,
      "y": 129.57421875,
      "width": 783.6795043945312,
      "height": 750,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a0",
      "roundness": null,
      "seed": 1873410503,
      "version": 682,
      "versionNonce": 538012553,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1744236125077,
      "link": null,
      "locked": false,
      "text": "Group anagrams\n\nHow to find out if two words are in the same group?\n- If they have the same words\n\nEx :  Bar , Arb , bra -> all one group\n        Bar, bra, arby -> [bar, bra] [arby] are two groups\n\nQuestions to ask\n- Case Sensitive?\n- Do we count whitespace?\n- Can we use builtin functions?\n\nWhat we know?\nThere can be multiple groups\nWhat can help? Sorting  would make sure all words have same letters if anagram.\n\nJava\npublic List<List<String>> groupAnagrams(String[] strs) {\n        if (strs.length == 0) return new ArrayList<>();\n        Map<String, List<String>> ans = new HashMap<String, List<String>>();\n        for (String s : strs) {\n            char[] ca = s.toCharArray();\n            Arrays.sort(ca);\n            String key = String.valueOf(ca);\n            ans.putIfAbsent(key, new ArrayList<String>());\n            ans.get(key).add(s);\n        }\n        return new ArrayList(ans.values());\n    }",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Group anagrams\n\nHow to find out if two words are in the same group?\n- If they have the same words\n\nEx :  Bar , Arb , bra -> all one group\n        Bar, bra, arby -> [bar, bra] [arby] are two groups\n\nQuestions to ask\n- Case Sensitive?\n- Do we count whitespace?\n- Can we use builtin functions?\n\nWhat we know?\nThere can be multiple groups\nWhat can help? Sorting  would make sure all words have same letters if anagram.\n\nJava\npublic List<List<String>> groupAnagrams(String[] strs) {\n        if (strs.length == 0) return new ArrayList<>();\n        Map<String, List<String>> ans = new HashMap<String, List<String>>();\n        for (String s : strs) {\n            char[] ca = s.toCharArray();\n            Arrays.sort(ca);\n            String key = String.valueOf(ca);\n            ans.putIfAbsent(key, new ArrayList<String>());\n            ans.get(key).add(s);\n        }\n        return new ArrayList(ans.values());\n    }",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "5eJ34CwoWNiq5G-Y6YH6C",
      "type": "text",
      "x": 1365.50390625,
      "y": 139.81640625,
      "width": 117.7799072265625,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a2",
      "roundness": null,
      "seed": 1932082345,
      "version": 13,
      "versionNonce": 2065464295,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1744234944567,
      "link": null,
      "locked": false,
      "text": "Approaches ",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Approaches ",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "gb0hxIY31CzZVRhj3F3ug",
      "type": "text",
      "x": 1373.52734375,
      "y": 199.9609375,
      "width": 1058.0792236328125,
      "height": 300,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a3",
      "roundness": null,
      "seed": 2068204201,
      "version": 892,
      "versionNonce": 952215911,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1744235895426,
      "link": null,
      "locked": false,
      "text": "Brute Force -> Can check for every string if there are anagrams in the array\nthen cut from the group and add to a group. By one iteration, one group should be deleted.\nTime Complexity O(n^3) -> Iterating through each string and checking for anagram\nSpace -> Can be O(n) if conserving size of the original list.\n\nSorting -> Can sort each string in terms of chars. Then can check which strings are equal\nTime O(n^2)\nSpace O(n) to store sorted strings\n\nSorting and Hashing -> Sort Again but push into a HashMap of <Sorted Word, Group that fits in the group>\nTime O(nlogn)\nSpace O(n) for HashMap",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Brute Force -> Can check for every string if there are anagrams in the array\nthen cut from the group and add to a group. By one iteration, one group should be deleted.\nTime Complexity O(n^3) -> Iterating through each string and checking for anagram\nSpace -> Can be O(n) if conserving size of the original list.\n\nSorting -> Can sort each string in terms of chars. Then can check which strings are equal\nTime O(n^2)\nSpace O(n) to store sorted strings\n\nSorting and Hashing -> Sort Again but push into a HashMap of <Sorted Word, Group that fits in the group>\nTime O(nlogn)\nSpace O(n) for HashMap",
      "autoResize": true,
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}