{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "id": "9Eu4lAVsvD7ddYdJqaCqX",
      "type": "text",
      "x": 374.625,
      "y": 112.26953125,
      "width": 254.26205444335943,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a0",
      "roundness": null,
      "seed": 1770864564,
      "version": 201,
      "versionNonce": 245390900,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1744487206989,
      "link": null,
      "locked": false,
      "text": "Top K Frequent Elements ",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Top K Frequent Elements ",
      "autoResize": false,
      "lineHeight": 1.25
    },
    {
      "id": "Wo-iQWAH1LbUjVnHcNUbe",
      "type": "text",
      "x": 383.1015625,
      "y": 164.5625,
      "width": 437.7996826171875,
      "height": 275,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a1",
      "roundness": null,
      "seed": 522019124,
      "version": 489,
      "versionNonce": 1966865204,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1744489500626,
      "link": null,
      "locked": false,
      "text": "In a group of numbers, we want to return \nthe top 3 elements that's appears the most\nExample \n[1, 2, 4, 5, 1, 1, 6, 7, 2] k = 3 [1, 2, 5]\n[1, 5,8,2,9,2,5]  k = 2 [2,5]\n\nQuestions :\nCan there be multiple of the same frequency?\nWhat if K is bigger than the list length?\nCan we use builtin in sorting functions;\n",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "In a group of numbers, we want to return \nthe top 3 elements that's appears the most\nExample \n[1, 2, 4, 5, 1, 1, 6, 7, 2] k = 3 [1, 2, 5]\n[1, 5,8,2,9,2,5]  k = 2 [2,5]\n\nQuestions :\nCan there be multiple of the same frequency?\nWhat if K is bigger than the list length?\nCan we use builtin in sorting functions;\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "klROjMpl6rrHN9vsDguCG",
      "type": "text",
      "x": 1012.9375,
      "y": 102.90234375,
      "width": 1125.959228515625,
      "height": 375,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a2",
      "roundness": null,
      "seed": 733573004,
      "version": 1068,
      "versionNonce": 1960031796,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1744489375156,
      "link": null,
      "locked": false,
      "text": "Approaches\nHow to store them?\nCan use arrays to store the frequencies of numbers\n- Ineffecient due to cases of large numbers\nHashMaps - Store frequency of large numbers\n- Optimized to just numbers that are represented\n\nHow to store them sorted?\n- ArrayList -> Insert into arraylist and use collections sort( or do a sorting algorithm)\n    - Do this for all values -> n * nlogn \n- Heap -> Insert into heap , Priority Queue -> Handles the sorting \n    - Doing this will be nlogn\n    - Have it sorted so that the most sorted values are in the back and smallest in the front (bigger values are in)\n\n ",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Approaches\nHow to store them?\nCan use arrays to store the frequencies of numbers\n- Ineffecient due to cases of large numbers\nHashMaps - Store frequency of large numbers\n- Optimized to just numbers that are represented\n\nHow to store them sorted?\n- ArrayList -> Insert into arraylist and use collections sort( or do a sorting algorithm)\n    - Do this for all values -> n * nlogn \n- Heap -> Insert into heap , Priority Queue -> Handles the sorting \n    - Doing this will be nlogn\n    - Have it sorted so that the most sorted values are in the back and smallest in the front (bigger values are in)\n\n ",
      "autoResize": true,
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}