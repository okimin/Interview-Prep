{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "id": "RO_03UTlMz3KOAFzcZYuq",
      "type": "text",
      "x": 753.173828125,
      "y": -93.63671875,
      "width": 378.6224365234375,
      "height": 55.41796874999997,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1C",
      "roundness": null,
      "seed": 1195883011,
      "version": 615,
      "versionNonce": 558739459,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1743721966162,
      "link": null,
      "locked": false,
      "text": "Contains Anagram",
      "fontSize": 44.33437499999998,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Contains Anagram",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "6jrpuSpzcFUGsnTybe0QQ",
      "type": "text",
      "x": 762.544921875,
      "y": -2.57421875,
      "width": 802.599365234375,
      "height": 475,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1D",
      "roundness": null,
      "seed": 535677763,
      "version": 663,
      "versionNonce": 1951312365,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1743730213931,
      "link": null,
      "locked": false,
      "text": "Given two strings, check if they are anagrams.\nWhat is an anagram?  A word that by using all the letters can make another word.\n\nExample \nArc Car are anagrams\nrace and tart are not\n\nHarp - Phar -> technically true\nY - X -> False\nIOp - Miss -> False\nHello - Hello! -> False if we account for all chars and not just letters?\n\nQuestions\nDo we account for special chars?\nDo we account for whitespaces?\nDuplicate chars?\n\nSimilar problems\nValid Palindrome",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Given two strings, check if they are anagrams.\nWhat is an anagram?  A word that by using all the letters can make another word.\n\nExample \nArc Car are anagrams\nrace and tart are not\n\nHarp - Phar -> technically true\nY - X -> False\nIOp - Miss -> False\nHello - Hello! -> False if we account for all chars and not just letters?\n\nQuestions\nDo we account for special chars?\nDo we account for whitespaces?\nDuplicate chars?\n\nSimilar problems\nValid Palindrome",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "Mg1m-1BbSUL2CDCoEUfF8",
      "type": "text",
      "x": 1782.345703125,
      "y": -60.296875,
      "width": 884.8193359375,
      "height": 275,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1E",
      "roundness": null,
      "seed": 221478691,
      "version": 878,
      "versionNonce": 1545775171,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1743731259713,
      "link": null,
      "locked": false,
      "text": "Common Approaches\nBrute Force \nFor each letter , check if that letter is in the other word\nreturn false if not found\nSorting -> Sort both words and check if equal to each other\nHashmap -> Store frequency of each word in both words and compare keys\n- Can use one hashmap to store frequency of one word. Then decrement \nbase on the amount in another word. If all are not 0, then return false\nArrays - If we are using only letters, then we can just use a constant array. \nThen increment the letter position for the first word and decrement for the second word.\n",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Common Approaches\nBrute Force \nFor each letter , check if that letter is in the other word\nreturn false if not found\nSorting -> Sort both words and check if equal to each other\nHashmap -> Store frequency of each word in both words and compare keys\n- Can use one hashmap to store frequency of one word. Then decrement \nbase on the amount in another word. If all are not 0, then return false\nArrays - If we are using only letters, then we can just use a constant array. \nThen increment the letter position for the first word and decrement for the second word.\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "T4HLr6REfIOF9U8-xn54p",
      "type": "text",
      "x": 762.353515625,
      "y": 502.56640625,
      "width": 438.5396423339844,
      "height": 400,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1G",
      "roundness": null,
      "seed": 67416173,
      "version": 461,
      "versionNonce": 261957869,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1743731279928,
      "link": null,
      "locked": false,
      "text": "JAVA\npublic boolean isAnagram(String s, String t) {\n        int [] letters = new int [26];\n        for(char c : s.toCharArray())\n            letters[c - 'a']++;\n        \n        for(char c : t.toCharArray())\n            letters[c - 'a']--;\n        \n        for(int res : letters)\n            if(res != 0)\n                return false;\n        \n        return true;\n\n    }",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "JAVA\npublic boolean isAnagram(String s, String t) {\n        int [] letters = new int [26];\n        for(char c : s.toCharArray())\n            letters[c - 'a']++;\n        \n        for(char c : t.toCharArray())\n            letters[c - 'a']--;\n        \n        for(int res : letters)\n            if(res != 0)\n                return false;\n        \n        return true;\n\n    }",
      "autoResize": true,
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}